nextflow_process {

    name "Test Process BAM2ERRORPROFILE"
    script "../main.nf"
    process "YUMI_BAM2ERRORPROFILE"

    tag "modules"
    tag "modules_nfcore"
    tag "bam2errorprofile"

    test("Base Test - no additional args") {

        when {
            process {
                """                
                input[0] = Channel.value([
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true)
                ])
                input[1] = Channel.value([
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_bed'], checkIfExists: true)
                ])
                input[2] = Channel.value([
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("Base Test - with args") {
        config "./bam2errorprofile.config"
        when {
            process {
                """                
                input[0] = Channel.value([
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true)
                ])
                input[1] = Channel.value([
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_bed'], checkIfExists: true)
                ])
                input[2] = Channel.value([
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
